{"version":3,"sources":["../../src/common/utility.ts"],"sourcesContent":["// https://github.com/maninak/ts-xor\nexport type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };\n\nexport type XOR<T, U> = T | U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;\n"],"mappings":"kWAAA","names":[]}