import { Structure } from '../marshmallow/index.js';
import * as bn_js from 'bn.js';
import * as _solana_web3_js from '@solana/web3.js';
import { GetStructureSchema } from '../marshmallow/buffer-layout.js';

declare const LIQUIDITY_STATE_LAYOUT_V4: Structure<_solana_web3_js.PublicKey | bn_js | bn_js[], "", {
    nonce: bn_js;
    owner: _solana_web3_js.PublicKey;
    baseMint: _solana_web3_js.PublicKey;
    quoteMint: _solana_web3_js.PublicKey;
    baseVault: _solana_web3_js.PublicKey;
    quoteVault: _solana_web3_js.PublicKey;
    baseLotSize: bn_js;
    quoteLotSize: bn_js;
    marketId: _solana_web3_js.PublicKey;
    status: bn_js;
    maxOrder: bn_js;
    depth: bn_js;
    baseDecimal: bn_js;
    quoteDecimal: bn_js;
    state: bn_js;
    resetFlag: bn_js;
    minSize: bn_js;
    volMaxCutRatio: bn_js;
    amountWaveRatio: bn_js;
    minPriceMultiplier: bn_js;
    maxPriceMultiplier: bn_js;
    systemDecimalValue: bn_js;
    minSeparateNumerator: bn_js;
    minSeparateDenominator: bn_js;
    tradeFeeNumerator: bn_js;
    tradeFeeDenominator: bn_js;
    pnlNumerator: bn_js;
    pnlDenominator: bn_js;
    swapFeeNumerator: bn_js;
    swapFeeDenominator: bn_js;
    baseNeedTakePnl: bn_js;
    quoteNeedTakePnl: bn_js;
    quoteTotalPnl: bn_js;
    baseTotalPnl: bn_js;
    quoteTotalDeposited: bn_js;
    baseTotalDeposited: bn_js;
    swapBaseInAmount: bn_js;
    swapQuoteOutAmount: bn_js;
    swapBase2QuoteFee: bn_js;
    swapQuoteInAmount: bn_js;
    swapBaseOutAmount: bn_js;
    swapQuote2BaseFee: bn_js;
    lpMint: _solana_web3_js.PublicKey;
    openOrders: _solana_web3_js.PublicKey;
    marketProgramId: _solana_web3_js.PublicKey;
    targetOrders: _solana_web3_js.PublicKey;
    withdrawQueue: _solana_web3_js.PublicKey;
    lpVault: _solana_web3_js.PublicKey;
    lpReserve: bn_js;
    padding: bn_js[];
}>;
declare type LiquidityStateLayoutV4 = typeof LIQUIDITY_STATE_LAYOUT_V4;
declare type LiquidityStateV4 = GetStructureSchema<LiquidityStateLayoutV4>;
declare const LIQUIDITY_STATE_LAYOUT_V5: Structure<_solana_web3_js.PublicKey | bn_js | bn_js[], "", {
    nonce: bn_js;
    owner: _solana_web3_js.PublicKey;
    baseMint: _solana_web3_js.PublicKey;
    quoteMint: _solana_web3_js.PublicKey;
    baseVault: _solana_web3_js.PublicKey;
    quoteVault: _solana_web3_js.PublicKey;
    baseLotSize: bn_js;
    quoteLotSize: bn_js;
    marketId: _solana_web3_js.PublicKey;
    status: bn_js;
    maxOrder: bn_js;
    depth: bn_js;
    baseDecimal: bn_js;
    quoteDecimal: bn_js;
    state: bn_js;
    resetFlag: bn_js;
    minSize: bn_js;
    volMaxCutRatio: bn_js;
    amountWaveRatio: bn_js;
    minPriceMultiplier: bn_js;
    maxPriceMultiplier: bn_js;
    minSeparateNumerator: bn_js;
    minSeparateDenominator: bn_js;
    tradeFeeNumerator: bn_js;
    tradeFeeDenominator: bn_js;
    pnlNumerator: bn_js;
    pnlDenominator: bn_js;
    swapFeeNumerator: bn_js;
    swapFeeDenominator: bn_js;
    baseNeedTakePnl: bn_js;
    quoteNeedTakePnl: bn_js;
    quoteTotalPnl: bn_js;
    baseTotalPnl: bn_js;
    swapBaseInAmount: bn_js;
    swapQuoteOutAmount: bn_js;
    swapBase2QuoteFee: bn_js;
    swapQuoteInAmount: bn_js;
    swapBaseOutAmount: bn_js;
    swapQuote2BaseFee: bn_js;
    lpMint: _solana_web3_js.PublicKey;
    openOrders: _solana_web3_js.PublicKey;
    marketProgramId: _solana_web3_js.PublicKey;
    targetOrders: _solana_web3_js.PublicKey;
    padding: bn_js[];
    accountType: bn_js;
    systemDecimalsValue: bn_js;
    abortTradeFactor: bn_js;
    priceTickMultiplier: bn_js;
    priceTick: bn_js;
    poolOpenTime: bn_js;
    punishPcAmount: bn_js;
    punishCoinAmount: bn_js;
    orderbookToInitTime: bn_js;
    modelDataAccount: _solana_web3_js.PublicKey;
}>;
declare type LiquidityStateLayoutV5 = typeof LIQUIDITY_STATE_LAYOUT_V5;
declare type LiquidityStateV5 = GetStructureSchema<LiquidityStateLayoutV5>;
declare type LiquidityState = LiquidityStateV4 | LiquidityStateV5;
declare type LiquidityStateLayout = LiquidityStateLayoutV4 | LiquidityStateLayoutV5;
declare const LIQUIDITY_VERSION_TO_STATE_LAYOUT: {
    [version: number]: LiquidityStateLayout;
};

export { LIQUIDITY_STATE_LAYOUT_V4, LIQUIDITY_STATE_LAYOUT_V5, LIQUIDITY_VERSION_TO_STATE_LAYOUT, LiquidityState, LiquidityStateLayout, LiquidityStateLayoutV4, LiquidityStateLayoutV5, LiquidityStateV4, LiquidityStateV5 };
